#+title: Emacs startup config

* Using this setup

  The easiest way to use this config is to clone this repo to your
  =$HOME/.emacs.d= directory.
  
  #+BEGIN_EXAMPLE
  git clone https://github.com/dmj111/emacs.d ~/.emacs.d
  #+END_EXAMPLE

  
** Customizing

   You can customize this startup without changing any of the files
   from this repository.  
   
   To do so, create a =.emacs.d/local= directory.  In that directory,
   optionally create =init-local.el= and =init-local-preload.el=.
   =init-local-preload.el= is loaded early in the setup, and
   =init-local.el= is loaded towards the end.

   If you want to create custom snippet files, they go in
   =local/snippets=.

   You can create a git repo inside the local directory if you wish to
   control the local customizations.

* Trying this setup
  To try out this file without actually installing it, run:

#+BEGIN_EXAMPLE
  emacs -nw -L . -l init.el
#+END_EXAMPLE

 - =-nw= no window
 - =-L .= add . to search path
 - =-l init.el= run init.el
 - =-Q= (maybe?  quick)

* References
  - [[https://github.com/bbatsov/prelude][Emacs Prelude]]
  - [[https://github.com/purcell/emacs.d][Steve Purcell's startup]]

* Notes


Universal arg: C-u is shorthand for 4.
C-u C-u is 4 times 4

C-0 to 9, and M-0 to 9 are bound to those numbers

C--, M--, C-M-- are negative, and can reverse the direction of a
command.


M-x eval-buffer, eval-region
C-M-x - eval-defun

C-h i to run info

- [, ] to go back/forward

ESC ESC ESC - close prompts, everything, goes back to one window.

C-/ - undo

#+BEGIN_EXAMPLE

  file local header:
     -*- mode: mode-name-here; my-variable: value -*-

  footer:
  Local Variables:
  mode: mode-name-here
  my-variable: value
  End:
#+END_EXAMPLE

- auto-mode-alist
- magic-mode-alist


- C-h C <RET> -- see current encoding system
- 



C-x 0 delete active window
C-x 1 delete other windows


Looks useful for S-left/right, etc:
(windmove-default-keybindings)

Other window commands:
C-x 4
- C-f (open file)
- d dired
- C-o displays buffer
- switches to buffer and window
- kills buffer and window

C-x 5: frame commands
2 - create new fream
b - switch to buffer
0 - delete active
1 - dlete other


M-m move to first non-whitespace char in line !!  (pure gold dust)

syntax table is where word, comment, etc. are defined.
C-h s

subword-mode - treats CamelCase as separate
superword-mode - treats snake_case as one word. 

C-M-f forward sexp, -b backward

C-M-d, u : down into list, up out of list
C-M-k kill sexp in front of point 
C-M-n, p move amongst balanced expressions at the same level

M-{} forward/backward paragraph
M-a/e sentence

C-M-a/e - begin/end function

C-x <> scroll left/right

Bookmarks C-x r (m/l/b)

Registers: C-x r (Number Sregion, SPCpoint, Jump, Insert, Window)

C-u C-spc pop the mark

S-left/right - shift selection

C-x C-x exchange point and mark.

C-x h mark buffer
C-M-h mark next defun
C-M-@ (or SPC) mark next s-exp.

Isearch 
C-M-s incremental regep
C-M-r incremental regep
RET pick selection

Use ISearch as default browsing.

ISearch history: M-n, M-p, C-M-i (tab complete isearch history)

C-w add word at point, C-M-y add char at point, M-s C-e add rest of
line, C-y yank to search string.

M-s c toggle case, M-s r toggle regex M-s w toggle word mode (treat
delims the same?), M-s _ symbole mode, M-s <spc> lax whitespace

M-s w isearch forward word.
M-s _ isearch forward symbol
M-s . isearch forward symbol

(except I have avy bound at M-s)

** occur
M-s o occur, or activate occur on current isearch
M-n,p walk through results
q quits, e edit

M-g C-n, C-p next / prev error (also in compile, grep)

M-x imenu (bind to M-i?)

** apropos

apropos-command, -variable

** helm
RET primary act
C-e secondary, C-j tertiary
TAB - action selector
C-n,p
M-<>

Helm key map
b resume last helm command
/ run find
a apropos
m man
i imenu / semantc
r interactive regex
h r searchicfo
M-x  M-s
C-c g google suggest matches

** ido
   
   ido better for buffer / file match (knowing what you want to
   select)

(ido-mode 1)
(setq ido-everywhere t)
(setq ido-enable-flex-matching t)

C-s/r move up/down
TAB - regular
// root
~/ home
Back - delete or go up

https://www.masteringemacs.org/article/introduction-to-ido-mode


- [ ] gnu core utils

** grep

grep 
grep-find 
lgrep 
rgrep
rzgrep

** win32 note

  to get gnu/cygwin find
  
(setenv "PATH" (concat "C:\\gnuwin32\\bin\\"
                             path-separator
                             (getenv "PATH")))

** movement
   C-M-l reposition function so it is in view
   M-g M-g go to line
   M-g TAB to to column

** killing
   C-M-k kill s-expression
   C-S-delete kill current line
   M-k kill sentence

   C-M-k append kill

   killing new text moves you back to the top of the kill ring (if you
   weren't there to start with )

** transposing   
   C-t chars
   M-t words-- word aware in programming modes !!
   C-M-t sexp
   C-x C-t lines
   transpose-paragraphs
   transpose-sentences
   
   tranposes before and after point

** filling

   M-q fill, with C-u - justfiedes
   C-x f set fill column
   C-x . set the fill prefix


   C-M-j, M-j in a comment, newline, and start a new comment

   comment-* variables

** replace
   query-regexp-replace
   replace-string
   replace-regexp

   Inside isearch:
   C-M-% qrr
   M-% query replace

   Query choices:
   y, spc - replace
   . replace, then quit
   RET, q - exit
   ^ move back to prev match

** regex
   stuff that needs escapes, unlike most regexes
   
   \|
   \(, \)
   \{, \}

   no \d.  must use 0-9 or [:digit:]

   \<, \> beg, end of word
   \_<, \>_  symbol

   \scode - syntax match of code
   \Scode - not code

   \s- (whitespace)
   \sw word constituent
   \s( \s) open, close
   \s" string delimeters
   \s< open comment , > close coment


   C-u C-x = (what-cursor-position) - display unicode info

   \1...\9 inserts text from match
   \#1 ... insert text as integer
   \? prompt user
   \# increment number
   \& whole match string
   \,(elisp-form \2) - only 
   

