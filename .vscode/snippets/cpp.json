{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"std::cout": {
		"prefix": "cout",
		"body": "std::cout << "
	},
	"endl": {
		"prefix": "endl",
		"body": "'\\n'",
		"description": "newline characater"
	},
	"std::vector": {
		"prefix": "vector",
		"body": "std::vector<$1>$0"
	},
	"class/rule-of-five": {
		"prefix": "class",
		"description": "class with rule of five",
		"body": [
			"class ${1:ClassName} {",
			"public:$0",
			"  $1() = ${2|default,delete|};",
			"  $1(const $1& other) = ${3|default,delete|};",
			"  $1& operator=(const $1& other) = ${4|default,delete|};",
			"",
			"  $1($1&& other) noexcept = ${5|default,delete|};",
			"  $1& operator=($1&& other) noexcept = ${6|default,delete|};",
			"",
			"  virtual ~$1() = ${7|default,delete|};",
			"",
			" private:",
			"};",
		]
	},
	"declaration-order": {
		"prefix": "class-declaration",
		"description": "template of dclaration order",
		"body": [
			"// Using-declarations, Typedefs and Enums",
			"// Constants (static const data members)",
			"// Constructors",
			"// assignment operators",
			"// Destructor",
			"// Methods, including static methods",
			"// Data Members (except static const data members)",
		]
	}