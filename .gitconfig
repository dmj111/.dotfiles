# In ~/.gitignore, use:
# [include]
#   path = /path/to/this/file
#
# [user]
#   name =
#   email =

# [github]
#   user =

[core]
    excludesfile = ~/.gitignore
    pager = less -F -X -R

[rerere]
    enabled = true

[color]
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    # meta = yellow bold
    meta = blue bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse

[apply]
    whitespace = warn

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[alias]
    pushup = !git push -u origin $(git rev-parse --abbrev-ref HEAD)
    a = add
    lgl = log --graph --pretty=format:'%Cred%h%Creset \
    -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' \
    --abbrev-commit --date=relative
        lg = !git lgl -n 20
    ci = commit --verbose
    pick = cherry-pick --sign-off
    sl = !git --no-pager log --oneline -n 10
    sb = status --short --branch
    st = status --short --branch
    log1 = log --pretty=oneline --abbrev-commit
    serve = daemon --reuseaddr --base-path=. --export-all --verbose
    top-commits = shortlog --summary --numbered --no-merges
    gdiff = difftool --gui --no-prompt
    prune-all = !git remote | xargs -n 1 git remote prune

    co = checkout
    cb = checkout -b
    ci = commit

    unstage = reset HEAD --

    last =  !git --no-pager log -1 HEAD --

    l = log --graph --pretty=format':%C(yellow)%h%Cblue%d%Creset \
    %s %C(white) %an, %ar%Creset'

    qm = "!git checkout $1; git merge @{-1}"
    lol = log --pretty=oneline --abbrev-commit --graph --decorate

    # Create a new branch off of origin/master
    nb = "!f() { if [[ -z $1 ]]; then \
    echo 'need a branch name.'; \
    exit 1 ; \
    else\
    git co --no-track -b ${1} origin/master ; \
    fi } ; f "

    # show the merge merge result between two branches without
    # actually doing the merge.
    obdiff="!f() { git merge-tree `git merge-base ${1} ${2}` ${1} ${2} ; } ; f "

    # Different from upstream
    inc=log ..@{u} --decorate
    out=log @{u}.. --decorate

    # Different from upstream master
    incm=log ..master@{u} --decorate
    outm=log master@{u}.. --decorate

    trash="!git commit -am trash; git reset --hard HEAD~1"


[push]
    # only push branches that are tracking a remote.
    default=current

[credential]
    helper = osxkeychain

[diff]
    submodule = log
    renames = copies
    mnemonicprefix = true
