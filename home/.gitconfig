# Notes:


# START LOCAL CUSTOMIZATION
# END LOCAL CUSTOMIZATION

[core]
    excludesfile = ~/.gitexcludes
    pager = less -F -X -R

[rerere]
    enabled = true

[color]
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    # meta = yellow bold
    meta = blue bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse

[apply]
    whitespace = warn

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

# One advantage of (simple) aliases is the zsh completion is aware of
# them and can complete based on the expansion.
[alias]
        ## informational aliases
        ##
        st = status --short --branch

	# One line log, limit to 20 commits
	lg = !git lgl -n 20

	# One line log with graph and relative time
	lgl = log --graph \
        --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd)%Creset' \
	--abbrev-commit --date=relative

	# One line log with graph and iso time
	lgld = !git lgl --date=iso

	# One line log, all refs
	lgla = !git lgl --all

	# http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/
	# one line log with stats
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat

	# show branch information, sorted by date (or reversed)
	bvv=branch -vv --sort=committerdate
	rbvv=branch -vv --sort=-committerdate

	# Show the most recent commit.
	last =  !git log -n 1 HEAD


        ## shortcuts
        ##
	co = checkout
	a = add
	ci = commit --verbose

        # Amend commit with current index
	commend = commit --amend --no-edit

	# checkout `ours`  during merge conflict.
        ours = "!f() { git checkout --ours $@; git add $@; } ; f "

	# checkout `theirs` during merge conflict.
        theirs = "!f() { git checkout --theirs $@; git add $@; } ; f "

        ## Commands for working with the main branch
        ##

        # To avoid checking into main and pushing, or setting main as
        # the upstream to a feature branch, use a branch alias for the
        # remote tracking branch.  Aliases here use `aaa` as that
        # alias.

        # Use this to set `aaa` to point at the main remote, i.e.:
        # git set-aaa refs/remotes/origin/main
        set-aaa = symbolic-ref refs/aaa

        # Checkout `aaa` detached to:
        # - avoid making commits on it directly
        # - not need to pull/merge/rebase to see the latest version
        #
        # `--detach` keeps `git branch ...` working ok.
        coa = checkout --detach aaa

        # Create a new-branch based on `aaa`, but without a tracking
        # relationship so we dont' push to it.
        new-branch = switch --no-track aaa -c
        nb = new-branch

        # See the diff of what this branch would do to the main branch:
        dd = diff aaa...

	# See differences with `aaa`.  Commits that are incoming or outgoing.
        # incm -> incoming main, outm -> outgoing main
	incm=log ..aaa --decorate
	outm=log aaa.. --decorate

        # Rebase off of `aaa`
        rbm = rebase aaa

        ## Safety aliases
        ##

        # `git please...` is slightly safer than `git push -f`.
	please = push --force-with-lease

	# Unstage current changes. The -- prevents adding extra
	# options, specifically `--hard`.
	unstage = reset HEAD --

        ## Extra
        ##
	pick = cherry-pick --sign-off

	# kick off a server
	serve = daemon --reuseaddr --base-path=. --export-all --verbose

	# Top committers
	top-commits = shortlog --summary --numbered --no-merges

	gdiff = difftool --gui --no-prompt

	# Prune all remote references
	prune-all = !git remote | xargs -n 1 git remote prune

	# Another log version
	l = log --graph --pretty=format':%C(yellow)%h%Cblue%d%Creset \
	%s %C(white) %an, %ar%Creset'

	# Quick merge?
	qm = "!git checkout $1; git merge @{-1}"

	# Old log message.
	lol = log --pretty=oneline --abbrev-commit --graph --decorate

	# show the merge result between two branches without actually
	# doing the merge.
	obdiff="!f() { git merge-tree `git merge-base ${1} ${2}` ${1} ${2} ; } ; f "

	# Different from upstream
	inc=log ..@{u} --decorate
	out=log @{u}.. --decorate

	# hasm - current branch has the main branch in its history
	hasm="!git merge-base --is-ancestor aaa HEAD && echo 'contains main' || echo 'does not contain main'"
	# inm - current branch is in main branch history
	inm="!git merge-base --is-ancestor HEAD aaa && echo 'contained' || echo 'not contained'"

	# only unstaged
	stsh = stash --keep-index

	# tracked + untracked
	staash = stash --include-untracked

	# tracked + untracked + ignored.
	# staaash = stash --all # too rare for me

[push]
    # only push branches that are tracking a remote.
    default=current

[credential]
    helper = osxkeychain

[fetch]
    prune = true

[diff]
    submodule = log
    renames = copies
    mnemonicprefix = true

[rebase]
  autosquash = true

# Make nicer diffs for org.
# Set `pat diff=org` in .gitattributes to use.
[diff "org"]
	xfuncname = "^\\*+ .*$"

# Make nicer diffs for ledger.
# Match start of entries
[diff "ledger"]
	xfuncname = "^[[:digit:]].*"

# How to include another file:
# [include]
# 	path = ~/.dotfiles/local/.gitconfig


# Use this to mark org headings as "functions" in get diff.
# Need "*.org diff=org" in gitattributes somewhere.
[diff "org"]
	xfuncname = "^\\*+ .*$"

[pull]
        ff = only

[init]
	defaultBranch = main

# To simplify local development of the dotfiles main branch, put the
# user name/email config in .git/config of the repo

# In local gitconfig:
# ----
# [user]
#   name =
#   email =
# [github]
#   user =

# START LOCAL CUSTOMIZATION
[include]
   path = ~/.dotfiles/home/.local.gitconfig
# END LOCAL CUSTOMIZATION
